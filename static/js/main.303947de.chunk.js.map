{"version":3,"sources":["App.js","mapStyles.js","serviceWorker.js","index.js"],"names":["libraries","mapContainerStyle","height","width","marginRight","marginLeft","options","styles","disableDefaultUI","zoomControl","scrollwheel","center","lat","lng","App","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","React","useState","selectedSpot","setSelectedSpot","role","aria-label","className","zoom","window","innerWidth","onClick","studySpots","map","spot","key","properties","id","position","geometry","coordinates","icon","url","scaledSize","google","maps","Size","onCloseClick","room","floor","building","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAWMA,EAAY,CAAC,UACbC,EAAoB,CACxBC,OAAQ,QACRC,MAAO,QACPC,YAAa,OACbC,WAAY,QAERC,EAAU,CACdC,OCnBa,CACX,CACI,YAAe,MACf,YAAe,cACf,QAAW,CACP,CACI,WAAc,SAI1B,CACI,YAAe,MACf,YAAe,cACf,QAAW,CACP,CACI,WAAc,SAI1B,CACI,YAAe,YACf,YAAe,gBACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,qBACf,YAAe,gBACf,QAAW,CACP,CACI,WAAc,MAElB,CACI,MAAS,UAIrB,CACI,YAAe,qBACf,YAAe,kBACf,QAAW,CACP,CACI,WAAc,MAElB,CACI,MAAS,QAEb,CACI,OAAU,UAItB,CACI,YAAe,eACf,YAAe,gBACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,eACf,YAAe,kBACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,QACf,YAAe,gBACf,QAAW,CACP,CACI,MAAS,cD1DvBC,kBAAkB,EAClBC,aAAa,EACbC,aAAa,GAETC,EAAS,CACbC,IAAK,UACLC,IAAK,UAGQ,SAASC,IAAO,IAAD,EACIC,YAAc,CAE5CC,iBAAkBC,0CAClBjB,cAHMkB,EADoB,EACpBA,SAAUC,EADU,EACVA,UADU,EAOYC,IAAMC,SAAS,MAP3B,mBAOrBC,EAPqB,KAOPC,EAPO,KAS5B,OAAIJ,EAAkB,QACjBD,EAGH,6BACE,kDAEE,0BAAMM,KAAK,MAAMC,aAAW,cAA5B,iBAKF,yBAAKC,UAAU,gBACb,kBAAC,IAAD,CACEzB,kBAAmBA,EACnB0B,KAAMC,OAAOC,WAAa,IAAM,GAAK,GACrCvB,QAASA,EACTK,OAAQA,EACRmB,QAAS,WACPP,EAAgB,QAGjBQ,IAAoBC,KAAI,SAACC,GAAD,OACvB,kBAAC,IAAD,CACEC,IAAKD,EAAKE,WAAWC,GACrBC,SAAU,CACRzB,IAAKqB,EAAKK,SAASC,YAAY,GAC/B1B,IAAKoB,EAAKK,SAASC,YAAY,IAEjCT,QAAS,WACPP,EAAgBU,IAElBO,KAAM,CACJC,IAAK,wDACLC,WAAY,IAAId,OAAOe,OAAOC,KAAKC,KAAK,GAAI,UAKjDvB,EACC,kBAAC,IAAD,CACEe,SAAU,CACRzB,IAAKU,EAAagB,SAASC,YAAY,GACvC1B,IAAKS,EAAagB,SAASC,YAAY,IAEzCO,aAAc,WACZvB,EAAgB,QAGlB,6BACE,oCACSD,EAAaa,WAAWY,MAEjC,qCACUzB,EAAaa,WAAWa,OAElC,wCACa1B,EAAaa,WAAWc,YAIvC,QA5DU,aE3BJC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC1C,EAAD,OAEF2C,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.303947de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\n\r\nimport mapStyles from \"./mapStyles\";\r\nimport * as studySpots from \"./data/study-spots.json\";\r\n\r\nconst libraries = [\"places\"];\r\nconst mapContainerStyle = {\r\n  height: \"100vh\",\r\n  width: \"100vw\",\r\n  marginRight: \"auto\",\r\n  marginLeft: \"auto\",\r\n};\r\nconst options = {\r\n  styles: mapStyles,\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n  scrollwheel: false,\r\n};\r\nconst center = {\r\n  lat: 52.333642,\r\n  lng: 4.865137,\r\n};\r\n\r\nexport default function App() {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    //Remember to set API restriction to URL after product is ready\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n\r\n  const [selectedSpot, setSelectedSpot] = React.useState(null);\r\n\r\n  if (loadError) return \"Error\";\r\n  if (!isLoaded) return \"Loading...\";\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        VU Study Spots &nbsp;\r\n        <span role=\"img\" aria-label=\"university\">\r\n          üè´\r\n        </span>\r\n      </h1>\r\n\r\n      <div className=\"mapContainer\">\r\n        <GoogleMap\r\n          mapContainerStyle={mapContainerStyle}\r\n          zoom={window.innerWidth > 768 ? 18 : 16}\r\n          options={options}\r\n          center={center}\r\n          onClick={() => {\r\n            setSelectedSpot(null);\r\n          }}\r\n        >\r\n          {studySpots.features.map((spot) => (\r\n            <Marker\r\n              key={spot.properties.id}\r\n              position={{\r\n                lat: spot.geometry.coordinates[0],\r\n                lng: spot.geometry.coordinates[1]\r\n              }}\r\n              onClick={() => {\r\n                setSelectedSpot(spot);\r\n              }}\r\n              icon={{\r\n                url: 'https://image.flaticon.com/icons/svg/2232/2232688.svg',\r\n                scaledSize: new window.google.maps.Size(35, 35)\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {selectedSpot ? (\r\n            <InfoWindow\r\n              position={{\r\n                lat: selectedSpot.geometry.coordinates[0],\r\n                lng: selectedSpot.geometry.coordinates[1]\r\n              }}\r\n              onCloseClick={() => {\r\n                setSelectedSpot(null);\r\n              }}\r\n            >\r\n              <div>\r\n                <p>\r\n                  Room: {selectedSpot.properties.room}\r\n                </p>\r\n                <p>\r\n                  Floor: {selectedSpot.properties.floor}\r\n                </p>\r\n                <p>\r\n                  Building: {selectedSpot.properties.building}\r\n                </p>\r\n              </div>\r\n            </InfoWindow>\r\n          ) : null}\r\n        </GoogleMap>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f1efe8\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"gamma\": \"1.19\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"gamma\": \"0.00\"\r\n            },\r\n            {\r\n                \"weight\": \"2.07\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b2ac83\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#b2ac83\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#8ac0c4\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}